syntax = "proto3";

package blob.v1;

import "google/protobuf/timestamp.proto";
import "proto/google/api/annotations.proto";
import "proto/protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/cmgsj/blob/pkg/gen/proto/blob/v1;blobv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "A Bit of Everything";
    version: "1.0";
    contact: {
      name: "gRPC-Gateway project";
      url: "https://github.com/grpc-ecosystem/grpc-gateway";
      email: "none@example.com";
    };
    license: {
      name: "BSD 3-Clause License";
      url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE.txt";
    };
    extensions: {
      key: "x-something-something";
      value {string_value: "yadda"}
    }
  };
  // Overwriting host entry breaks tests, so this is not done here.
  external_docs: {
    url: "https://github.com/grpc-ecosystem/grpc-gateway";
    description: "More about gRPC-Gateway";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {type: TYPE_BASIC}
    }
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-API-Key";
        extensions: {
          key: "x-amazon-apigateway-authtype";
          value {string_value: "oauth2"}
        }
        extensions: {
          key: "x-amazon-apigateway-authorizer";
          value {
            struct_value {
              fields {
                key: "type";
                value {string_value: "token"}
              }
              fields {
                key: "authorizerResultTtlInSeconds";
                value {number_value: 60}
              }
            }
          }
        }
      }
    }
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "https://example.com/oauth/authorize";
        token_url: "https://example.com/oauth/token";
        scopes: {
          scope: {
            key: "read";
            value: "Grants read access";
          }
          scope: {
            key: "write";
            value: "Grants write access";
          }
          scope: {
            key: "admin";
            value: "Grants read and write access to administrative information";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "BasicAuth";
      value: {};
    }
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "read";
        scope: "write";
      }
    }
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
};

service BlobService {
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option (google.api.http) = {get: "/api/v1/blob"};
  }
  rpc GetFile(GetFileRequest) returns (GetFileResponse) {
    option (google.api.http) = {get: "/api/v1/blob/{file_name}"};
  }
  rpc WriteFile(WriteFileRequest) returns (WriteFileResponse) {
    option (google.api.http) = {
      post: "/api/v1/blob/{file_name}"
      body: "*"
    };
  }
  rpc RenameFile(RenameFileRequest) returns (RenameFileResponse) {
    option (google.api.http) = {
      patch: "/api/v1/blob/{file_name}"
      body: "*"
    };
  }
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {
    option (google.api.http) = {delete: "/api/v1/blob/{file_name}"};
  }
}

message File {
  string name = 1;
  int64 size = 2;
  google.protobuf.Timestamp mod_time = 4;
  bool is_dir = 5;
  optional bytes content = 6;
}

message ListFilesRequest {
  string path = 1;
}

message ListFilesResponse {
  repeated File files = 1;
}

message GetFileRequest {
  string file_name = 1;
}

message GetFileResponse {
  File file = 1;
}

message RenameFileRequest {
  string file_name = 1;
  string new_file_name = 2;
}

message RenameFileResponse {}

message WriteFileRequest {
  string file_name = 1;
  optional bool is_dir = 2;
  bytes content = 3;
}

message WriteFileResponse {}

message DeleteFileRequest {
  string file_name = 1;
}

message DeleteFileResponse {}
